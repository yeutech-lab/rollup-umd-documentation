// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReactComponent should pass rendered description, usage, examples, etc. to the renderer 1`] = `
<Styled(ReactComponent)
  description={
    <Markdown
      text="Bar"
    />
  }
  docs={<JsDoc />}
  examples={
    <Examples
      examples={
        Array [
          Object {
            "content": 
<button>
  OK
</button>
,
            "evalInContext": [Function],
            "type": "code",
          },
          Object {
            "content": "Hello *world*!",
            "type": "markdown",
          },
        ]
      }
      name="Foo"
    />
  }
  heading={
    <SectionHeading
      deprecated={false}
      depth={3}
      id="foo"
      slotName="componentToolbar"
      slotProps={
        Object {
          "isolated": false,
          "metadata": Object {
            "tags": Array [
              "one",
              "two",
            ],
          },
          "name": "Foo",
          "pathLine": "foo/bar.js",
          "props": Object {
            "description": "Bar",
            "examples": Array [
              Object {
                "content": 
<button>
  OK
</button>
,
                "evalInContext": [Function],
                "type": "code",
              },
              Object {
                "content": "Hello *world*!",
                "type": "markdown",
              },
            ],
            "methods": Array [
              Object {
                "description": "Sets the counter to a particular value.",
                "name": "set",
                "params": Array [
                  Object {
                    "description": "New value for the counter.",
                    "name": "newValue",
                    "type": Object {
                      "name": "Number",
                    },
                  },
                ],
                "returns": null,
              },
            ],
          },
          "slug": "foo",
        }
      }
    >
      Foo
    </SectionHeading>
  }
  name="Foo"
  pathLine="foo/bar.js"
  slug="foo"
  tabBody={
    <Slot
      active={undefined}
      name="docsTabs"
      onlyActive={true}
      props={
        Object {
          "metadata": Object {
            "tags": Array [
              "one",
              "two",
            ],
          },
          "name": "Foo",
          "pathLine": "foo/bar.js",
          "props": Object {
            "description": "Bar",
            "examples": Array [
              Object {
                "content": 
<button>
  OK
</button>
,
                "evalInContext": [Function],
                "type": "code",
              },
              Object {
                "content": "Hello *world*!",
                "type": "markdown",
              },
            ],
            "methods": Array [
              Object {
                "description": "Sets the counter to a particular value.",
                "name": "set",
                "params": Array [
                  Object {
                    "description": "New value for the counter.",
                    "name": "newValue",
                    "type": Object {
                      "name": "Number",
                    },
                  },
                ],
                "returns": null,
              },
            ],
          },
          "slug": "foo",
        }
      }
    />
  }
  tabButtons={
    <Slot
      active={undefined}
      name="docsTabButtons"
      props={
        Object {
          "metadata": Object {
            "tags": Array [
              "one",
              "two",
            ],
          },
          "name": "Foo",
          "onClick": [Function],
          "pathLine": "foo/bar.js",
          "props": Object {
            "description": "Bar",
            "examples": Array [
              Object {
                "content": 
<button>
  OK
</button>
,
                "evalInContext": [Function],
                "type": "code",
              },
              Object {
                "content": "Hello *world*!",
                "type": "markdown",
              },
            ],
            "methods": Array [
              Object {
                "description": "Sets the counter to a particular value.",
                "name": "set",
                "params": Array [
                  Object {
                    "description": "New value for the counter.",
                    "name": "newValue",
                    "type": Object {
                      "name": "Number",
                    },
                  },
                ],
                "returns": null,
              },
            ],
          },
          "slug": "foo",
        }
      }
    />
  }
/>
`;

exports[`ReactComponentRenderer should render component 1`] = `
<div
  id="Test-container"
>
  <header>
    <div>
      heading
    </div>
    <Styled(Pathline)>
      components/test
    </Styled(Pathline)>
  </header>
</div>
`;

exports[`ReactComponentRenderer should render component without a pathline 1`] = `
<div
  id="Test-container"
>
  <header>
    <div>
      heading
    </div>
  </header>
</div>
`;

exports[`ReactComponentRenderer should render description 1`] = `
<div
  id="Test-container"
>
  <header>
    <div>
      heading
    </div>
    <Styled(Pathline)>
      components/test
    </Styled(Pathline)>
  </header>
  <div>
    <div>
      description
    </div>
  </div>
</div>
`;

exports[`ReactComponentRenderer should render docs 1`] = `
<div
  id="Test-container"
>
  <header>
    <div>
      heading
    </div>
    <Styled(Pathline)>
      components/test
    </Styled(Pathline)>
  </header>
  <div>
    <div>
      docs
    </div>
  </div>
</div>
`;

exports[`ReactComponentRenderer should render examples 1`] = `
<div
  id="Test-container"
>
  <header>
    <div>
      heading
    </div>
    <Styled(Pathline)>
      components/test
    </Styled(Pathline)>
  </header>
  <div
    key="1"
  >
    example 1
  </div>
  <div
    key="2"
  >
    example 2
  </div>
</div>
`;

exports[`ReactComponentRenderer should render usage section 1`] = `
<div
  id="Test-container"
>
  <header>
    <div>
      heading
    </div>
    <Styled(Pathline)>
      components/test
    </Styled(Pathline)>
  </header>
  <div>
    <div>
      <div>
        tab buttons
      </div>
    </div>
    <div>
      tab body
    </div>
  </div>
</div>
`;
